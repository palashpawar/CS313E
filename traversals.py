"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Palash Pawar, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""


def row_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    left-to-right and right-to-left traversal for each row from
    top-to-bottom, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    if not grid or not grid[0]:
        return []

    traversal = []
    for row in range(len(grid)):
        if row % 2 == 0:
            traversal.extend((row, col) for col in range(len(grid[0])))
        else:
            traversal.extend((row, col) for col in range(len(grid[0]) - 1, -1, -1))

    return traversal


def column_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    top-to-bottom and bottom-to-top traversal for each column from
    left-to-right, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    if not grid or not grid[0]:
        return []

    traversal = []
    num_rows, num_cols = len(grid), len(grid[0])

    for col in range(num_cols):
        if col % 2 == 0:
            traversal.extend((row, col) for row in range(num_rows))
        else:
            traversal.extend((row, col) for row in range(num_rows - 1, -1, -1))

    return traversal


def main_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-right to the bottom-left in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    if not grid or not grid[0]:
        return []

    traversal = []
    num_rows, num_cols = len(grid), len(grid[0])

    for start_col in range(num_cols - 1, -1, -1):
        row, col = 0, start_col
        while row < num_rows and col < num_cols:
            traversal.append((row, col))
            row += 1
            col += 1

    for start_row in range(1, num_rows):
        row, col = start_row, 0
        while row < num_rows and col < num_cols:
            traversal.append((row, col))
            row += 1
            col += 1

    return traversal


def secondary_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-left to the bottomt-right in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    if not grid or not grid[0]:
        return []

    traversal = []
    num_rows, num_cols = len(grid), len(grid[0])

    for start_col in range(num_cols):
        row, col = 0, start_col
        while row < num_rows and col >= 0:
            traversal.append((row, col))
            row += 1
            col -= 1

    for start_row in range(1, num_rows):
        row, col = start_row, num_cols - 1
        while row < num_rows and col >= 0:
            traversal.append((row, col))
            row += 1
            col -= 1

    return traversal


def spiral_traversal(grid):
    """
    Performs a spiral traversal of a 2D list, iterating from 
    the outside rows and columns inward, and returns a list
    of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    if not grid or not grid[0]:
        return []

    traversal = []
    num_rows, num_cols = len(grid), len(grid[0])
    top, bottom, left, right = 0, num_rows - 1, 0, num_cols - 1

    while top <= bottom and left <= right:
        for col in range(left, right + 1):
            traversal.append((top, col))
        top += 1

        for row in range(top, bottom + 1):
            traversal.append((row, right))
        right -= 1

        if top <= bottom:
            for col in range(right, left - 1, -1):
                traversal.append((bottom, col))
            bottom -= 1

        if left <= right:
            for row in range(bottom, top - 1, -1):
                traversal.append((row, left))
            left += 1

    return traversal
