"""
Student information for this assignment:

On my, Palash, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""


def rail_fence_encode(string, key):
    """
    pre:  string is a string of characters and key is an integer 2 <= key < len(string)
    post: returns a single string encoded with the rail‐fence algorithm
    """
    rails = [''] * key
    row = 0
    direction = 1  # 1 = down, -1 = up

    for ch in string:
        rails[row] += ch
        # reverse direction if we hit the top or bottom rail
        if row + direction == key or row + direction < 0:
            direction *= -1
        row += direction

    return ''.join(rails)


def rail_fence_decode(string, key):
    """
    pre:  string is a string of characters and key is an integer 2 <= key < len(string)
    post: returns the decoded plain‐text
    """
    n = len(string)
    # create empty grid
    grid = [[''] * n for _ in range(key)]

    # mark the zig‐zag pattern with placeholders
    row = 0
    direction = 1
    for col in range(n):
        grid[row][col] = '*'
        if row + direction == key or row + direction < 0:
            direction *= -1
        row += direction

    # fill letters into the marked spots, row by row
    idx = 0
    for r in range(key):
        for c in range(n):
            if grid[r][c] == '*' and idx < n:
                grid[r][c] = string[idx]
                idx += 1

    # read off the letters in zig‐zag order
    result = []
    row = 0
    direction = 1
    for col in range(n):
        result.append(grid[row][col])
        if row + direction == key or row + direction < 0:
            direction *= -1
        row += direction

    return ''.join(result)


def filter_string(string):
    """
    pre:  string is a string of characters
    post: returns lowercase-only string with no digits, punctuation, or spaces
    """
    s = string.lower()
    return ''.join(ch for ch in s if 'a' <= ch <= 'z')


def encode_character(p, s):
    """
    pre:  p and s are lowercase letters ('a'..'z')
    post: returns the single character resulting from Vigenère encoding
    """
    shift = (ord(s) - 97 + (ord(p) - 97)) % 26
    return chr(shift + 97)


def decode_character(p, s):
    """
    pre:  p and s are lowercase letters ('a'..'z')
    post: returns the single character resulting from Vigenère decoding
    """
    shift = (ord(s) - 97 - (ord(p) - 97) + 26) % 26
    return chr(shift + 97)


def vigenere_encode(string, phrase):
    """
    pre:  string is raw text, phrase is passphrase
    post: returns the Vigenère‐encoded lowercase string
    """
    plain = filter_string(string)
    key = filter_string(phrase)
    result = []
    klen = len(key)

    for i, ch in enumerate(plain):
        p = key[i % klen]
        result.append(encode_character(p, ch))

    return ''.join(result)


def vigenere_decode(string, phrase):
    """
    pre:  string is Vigenère cipher text, phrase is passphrase
    post: returns the Vigenère‐decoded lowercase string
    """
    cipher = filter_string(string)
    key = filter_string(phrase)
    result = []
    klen = len(key)

    for i, ch in enumerate(cipher):
        p = key[i % klen]
        result.append(decode_character(p, ch))

    return ''.join(result)


def main():
    # Read inputs in the specified order:
    # 1) plain text for rail‐fence
    # 2) key for rail‐fence encode
    # 3) cipher text for rail‐fence decode
    # 4) key for rail‐fence decode
    # 5) plain text for Vigenère
    # 6) pass phrase for Vigenère encode
    # 7) cipher text for Vigenère decode
    # 8) pass phrase for Vigenère decode

    plain_rf  = input().rstrip('\n')
    key_rf    = int(input().strip())
    cipher_rf = input().rstrip('\n')
    key_rf2   = int(input().strip())
    plain_vg  = input().rstrip('\n')
    phrase_vg = input().rstrip('\n')
    cipher_vg = input().rstrip('\n')
    phrase_vg2= input().rstrip('\n')

    # Rail‐Fence section
    print("Rail Fence Cipher\n")
    print(f"Plain Text: {plain_rf}")
    print(f"Key: {key_rf}")
    print(f"Encoded Text: {rail_fence_encode(plain_rf, key_rf)}\n")
    print(f"Encoded Text: {cipher_rf}")
    print(f"Enter Key: {key_rf2}")
    print(f"Decoded Text: {rail_fence_decode(cipher_rf, key_rf2)}\n")

    # Vigenère section
    print("Vigenere Cipher\n")
    print(f"Plain Text: {plain_vg}")
    print(f"Pass Phrase: {phrase_vg}")
    print(f"Encoded Text: {vigenere_encode(plain_vg, phrase_vg)}\n")
    print(f"Encoded Text: {cipher_vg}")
    print(f"Pass Phrase: {phrase_vg2}")
    print(f"Decoded Text: {vigenere_decode(cipher_vg, phrase_vg2)}")


if __name__ == "__main__":
    main()
