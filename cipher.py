"""
Student information for this assignment:

On my, Palash, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""


def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    if not string or key <= 1:
        return string

    rail = [''] * key
    row, step = 0, 1
    
    for char in string:
        rail[row] += char
        row += step
        if row == key - 1 or row == 0:
            step = -step
            
    return ''.join(rail)

def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    if not string or key <= 1:
        return string

    # Create the zigzag pattern
    pattern = []
    row, step = 0, 1
    for _ in range(len(string)):
        pattern.append(row)
        row += step
        if row == key - 1 or row == 0:
            step = -step
    
    # Calculate rail lengths
    rail_lengths = [0] * key
    for r in pattern:
        rail_lengths[r] += 1
    
    # Distribute characters to rails
    rails = []
    pos = 0
    for length in rail_lengths:
        rails.append(list(string[pos:pos+length]))
        pos += length
    
    # Reconstruct string
    result = [''] * len(string)
    for i, r in enumerate(pattern):
        result[i] = rails[r].pop(0)
        
    return ''.join(result)

def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    return ''.join(char.lower() for char in string if char.isalpha())

def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    if not s.isalpha():
        return s
    p = p.lower()
    s = s.lower()
    p_val = ord(p) - ord('a')
    s_val = ord(s) - ord('a')
    encoded_val = (s_val + p_val) % 26
    return chr(encoded_val + ord('a'))

def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    if not s.isalpha():
        return s
    p = p.lower()
    s = s.lower()
    p_val = ord(p) - ord('a')
    s_val = ord(s) - ord('a')
    decoded_val = (s_val - p_val) % 26
    return chr(decoded_val + ord('a'))

def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    result = []
    phrase = filter_string(phrase)
    if not phrase:
        return string
        
    phrase_index = 0
    filtered_string = filter_string(string)
    
    for char in string:
        if char.isalpha():
            p = phrase[phrase_index % len(phrase)]
            result.append(encode_character(p, char))
            phrase_index += 1
        else:
            result.append(char)
            
    return ''.join(result)

def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    result = []
    phrase = filter_string(phrase)
    if not phrase:
        return string
        
    phrase_index = 0
    
    for char in string:
        if char.isalpha():
            p = phrase[phrase_index % len(phrase)]
            result.append(decode_character(p, char))
            phrase_index += 1
        else:
            result.append(char)
            
    return ''.join(result)

def main():
    """Main function that reads stdin and runs each cipher"""
    # Rail fence encode
    plain_text = input()
    key = int(input())
    encoded = rail_fence_encode(plain_text, key)
    print(encoded)
    
    # Rail fence decode
    encoded_text = input()
    key = int(input())
    decoded = rail_fence_decode(encoded_text, key)
    print(decoded)
    
    # Vigenere encode
    plain_text = input()
    phrase = input()
    encoded = vigenere_encode(plain_text, phrase)
    print(encoded)
    
    # Vigenere decode
    encoded_text = input()
    phrase = input()
    decoded = vigenere_decode(encoded_text, phrase)
    print(decoded)

if __name__ == "__main__":
    main()
