"""
Student information for this assignment:

On my/our honor, Palash, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = max(0, salary)  
        self.happiness = 50
        self.performance = 75
        self.savings = 1000

    def work(self):
        self.performance += random.randint(-10, 10)

    def interact(self, other):
        if isinstance(other, Employee):
            if self.happiness > 50 and other.happiness > 50:
                self.happiness += 1
            else:
                self.happiness -= 1

    def __str__(self):
        return f"{self.__class__.__name__}({self.name}, Salary: {self.salary}, Happiness: {self.happiness}, Performance: {self.performance})"

class Manager(Employee):
    def __init__(self, name, salary):
        super().__init__(name, salary)
        self.employees = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def work(self):
        self.performance += random.randint(-5, 5)
        self.happiness -= 1  

    def __str__(self):
        return f"Manager({self.name}, Salary: {self.salary}, Happiness: {self.happiness}, Performance: {self.performance})"

class TemporaryEmployee(Employee):
    def __init__(self, name, salary, manager=None):
        super().__init__(name, salary)
        self.manager = manager

    def work(self):
        self.performance += random.randint(-15, 15)
        self.happiness -= 2 if self.performance < 50 else 1

    def interact(self, other):
        if isinstance(other, Manager) and other != self.manager:
            self.happiness -= 2  
        else:
            super().interact(other)

    def __str__(self):
        return f"TemporaryEmployee({self.name}, Salary: {self.salary}, Happiness: {self.happiness}, Performance: {self.performance})"

class PermanentEmployee(Employee):
    def __init__(self, name, salary, manager=None):
        super().__init__(name, salary)
        self.manager = manager

    def work(self):
        self.performance += random.randint(-10, 10)
        if self.performance > 25:
            self.happiness += 1

    def interact(self, other):
        if isinstance(other, Manager):
            if other.happiness < 30:
                self.happiness -= 3 
        super().interact(other)

    def __str__(self):
        return f"PermanentEmployee