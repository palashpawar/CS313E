"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Palash Pawar, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""


def group_sum(start, nums, target):
    if target == 0:
        return True
    if start >= len(nums):
        return False
    return group_sum(start + 1, nums, target - nums[start]) or group_sum(start + 1, nums, target)

def group_sum_6(start, nums, target):
    if start >= len(nums):
        return target == 0
    if nums[start] == 6:
        return group_sum_6(start + 1, nums, target - nums[start])
    return group_sum_6(start + 1, nums, target - nums[start]) or group_sum_6(start + 1, nums, target)

def group_no_adj(start, nums, target):
    if target == 0:
        return True
    if start >= len(nums):
        return False
    return group_no_adj(start + 2, nums, target - nums[start]) or group_no_adj(start + 1, nums, target)

def group_sum_5(start, nums, target):
    if start >= len(nums):
        return target == 0
    must_include = nums[start] % 5 == 0
    skip_next = must_include and start + 1 < len(nums) and nums[start + 1] == 1
    if must_include:
        return group_sum_5(start + (2 if skip_next else 1), nums, target - nums[start])
    return group_sum_5(start + 1, nums, target - nums[start]) or group_sum_5(start + 1, nums, target)

def group_sum_clump(start, nums, target):
    if start >= len(nums):
        return target == 0
    sum_clump = nums[start]
    i = start + 1
    while i < len(nums) and nums[i] == nums[start]:
        sum_clump += nums[i]
        i += 1
    return group_sum_clump(i, nums, target - sum_clump) or group_sum_clump(i, nums, target)

def split_array(nums):
    return split_helper(nums, 0, 0, 0)

def split_odd_10(nums):
    return split_helper_odd_10(nums, 0, 0, 0)

def split_53(nums):
    return split_helper_53(nums, 0, 0, 0)

def split_helper(nums, index, sum1, sum2):
    if index == len(nums):
        return sum1 == sum2
    return split_helper(nums, index + 1, sum1 + nums[index], sum2) or \
           split_helper(nums, index + 1, sum1, sum2 + nums[index])

def split_helper_odd_10(nums, index, sum1, sum2):
    if index == len(nums):
        return (sum1 % 10 == 0 and sum2 % 2 == 1) or (sum2 % 10 == 0 and sum1 % 2 == 1)
    return split_helper_odd_10(nums, index + 1, sum1 + nums[index], sum2) or \
           split_helper_odd_10(nums, index + 1, sum1, sum2 + nums[index])

def split_helper_53(nums, index, sum5, sum3):
    if index == len(nums):
        return sum5 == sum3
    if nums[index] % 5 == 0:
        return split_helper_53(nums, index + 1, sum5 + nums[index], sum3)
    if nums[index] % 3 == 0 and nums[index] % 5 != 0:
        return split_helper_53(nums, index + 1, sum5, sum3 + nums[index])
    return split_helper_53(nums, index + 1, sum5 + nums[index], sum3) or \
           split_helper_53(nums, index + 1, sum5, sum3 + nums[index])
