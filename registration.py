"""
Student information for this assignment:

On my honor, Palash, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ppp625
"""

import sys


class HeapError(Exception):
    """
    Custom exception class for heap errors.
    """


class BinaryHeap:
    """A modified binary heap implementation from the readings."""

    def __init__(self):
        """
        Initializes an empty binary heap.
        """
        self.__heap = []


    def _perc_up(self, i):
        """
        Moves the element at index i up to its correct position in the heap.
        """
        while (i - 1) // 2 >= 0:
            parent_idx = (i - 1) // 2
            if self.__heap[i] < self.__heap[parent_idx]:
                self.__heap[i], self.__heap[parent_idx] = (
                    self.__heap[parent_idx],
                    self.__heap[i],
                )
            i = parent_idx


    def insert(self, item):
        """
        Inserts a new item into the heap and maintains the heap property.
        """
        self.__heap.append(item)
        self._perc_up(len(self.__heap) - 1)


    def _perc_down(self, i):
        """
        Moves the element at index i down to its correct position in the heap."""
        while 2 * i + 1 < len(self.__heap):
            sm_child = self._get_min_child(i)
            if self.__heap[i] > self.__heap[sm_child]:
                self.__heap[i], self.__heap[sm_child] = (
                    self.__heap[sm_child],
                    self.__heap[i],
                )
            else:
                break
            i = sm_child


    def _get_min_child(self, i):
        """
        Returns the index of the smaller child of the node at index i.
        """
        if 2 * i + 2 > len(self.__heap) - 1:
            return 2 * i + 1
        if self.__heap[2 * i + 1] < self.__heap[2 * i + 2]:
            return 2 * i + 1
        return 2 * i + 2


    def delete(self):
        """
        Removes and returns the smallest item from the heap."""
        if self.is_empty():
            raise HeapError("Heap is empty")
        self.__heap[0], self.__heap[-1] = self.__heap[-1], self.__heap[0]
        result = self.__heap.pop()
        self._perc_down(0)
        return result


    def peek(self):
        """
        Returns the smallest item from the heap without removing it.
        """
        if self.is_empty():
            raise IndexError("Heap is empty")
        return self.__heap[0]


    def is_empty(self):
        """
        Checks if the heap is empty."""
        return len(self.__heap) == 0


    def heapify(self, not_a_heap):
        """
        Converts a list into a heap in O(n) time."""
        self.__heap = not_a_heap[:]
        i = len(self.__heap) // 2 - 1
        while i >= 0:
            self._perc_down(i)
            i = i - 1


class Node:
    """
    Represents a node in a singly linked list.

    Instance Variables:
        data: The value or data stored in the node.
        next: The reference to the next node in the linked list (None by default).
    """

    def __init__(self, data, link=None):
        """
        Initializes a new node with the given data and a reference to the next node.

        Args:
            data: The data to store in the node.
            link: Optional; the next node in the linked list (None by default).
        """
        self.data = data
        self.next = link


    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next


    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")


class StackError(Exception):
    """
    Custom exception class for stack errors.
    """


class Stack:
    """
    A class that implements a stack using a singly linked list.

    Instance Variables:
        _top: The top node of the stack.
        _size: The number of elements in the stack.
    """

    def __init__(self):
        """
        Initializes an empty stack with no elements.
        """
        self._top = None
        self._size = 0


    def peek(self):
        """
        Returns the value at the top of the stack without removing it.

        Raises:
            StackError: If the stack is empty, raises "Peek from empty stack.".

        Returns:
            The data stored in the top node of the stack.
        """
        if self.is_empty():
            raise StackError("Peek from empty stack.")
        return self._top.data


    def push(self, item):
        """
        Pushes a new item onto the top of the stack.

        Args:
            item: The data to push onto the stack.
        """
        new_node = Node(item)
        new_node.next = self._top
        self._top = new_node
        self._size += 1


    def pop(self):
        """
        Removes and returns the item at the top of the stack.

        Raises:
            StackError: If the stack is empty, raises "Pop from empty stack.".

        Returns:
            The data from the top node of the stack.
        """
        if self.is_empty():
            raise StackError("Pop from empty stack.")
        removed_data = self._top.data
        self._top = self._top.next
        self._size -= 1
        return removed_data


    def is_empty(self):
        """
        Checks if the stack is empty.

        Returns:
            True if the stack is empty, False otherwise.
        """
        return self._top is None


    def size(self):
        """
        Returns the number of items in the stack.

        Returns:
            The size of the stack as an integer.
        """
        return self._size


class Vertex:
    """Vertex Class using properties and setters for better encapsulation."""

    def __init__(self, label):
        self.__label = label
        self.visited = False
        self.depth = -1


    @property
    def visited(self):
        """Property to get the visited status of the vertex."""
        return self.__visited


    @visited.setter
    def visited(self, value):
        """Setter to set the visited status of the vertex."""
        if isinstance(value, bool):
            self.__visited = value
        else:
            raise ValueError("Visited status must be a boolean value.")


    @property
    def depth(self):
        """Property to get the depth of the vertex. This is the number of prereqs
        that need to be completed before this course."""
        return self.__depth


    @depth.setter
    def depth(self, value):
        """Setter to set the visited status of the vertex."""
        if isinstance(value, int):
            self.__depth = value
        else:
            raise ValueError("Depth must be a integer value.")


    @property
    def label(self):
        """Property to get the label of the vertex."""
        return self.__label


    def __str__(self):
        """String representation of the vertex"""
        return str(self.__label)


class Graph:
    """A Class to present a Graph."""

    def __init__(self):
        self.vertices = []  # a list of vertex objects
        self.adjacency_matrix = []  # adjacency matrix of edges


    def has_vertex(self, label):
        """Check if a vertex is already in the graph"""
        num_vertices = len(self.vertices)
        for i in range(num_vertices):
            if label == self.vertices[i].label:
                return True
        return False


    def get_index(self, label):
        """Given a label get the index of a vertex"""
        num_vertices = len(self.vertices)
        for i in range(num_vertices):
            if label == self.vertices[i].label:
                return i
        return -1


    def add_vertex(self, label):
        """Add a Vertex with a given label to the graph"""
        if self.has_vertex(label):
            return

        # add vertex to the list of vertices
        self.vertices.append(Vertex(label))

        # add a new column in the adjacency matrix
        num_vertices = len(self.vertices)
        for i in range(num_vertices - 1):
            self.adjacency_matrix[i].append(0)

        # add a new row for the new vertex
        new_row = []
        for i in range(num_vertices):
            new_row.append(0)
        self.adjacency_matrix.append(new_row)


    def add_edge(self, start, finish):
        """Add unweighted directed edge to graph"""
        self.adjacency_matrix[start][finish] = 1


    def get_adjacent_vertices(self, vertex_index):
        """Return adjacent vertex indices to vertex_index"""
        vertices = []
        num_vertices = len(self.vertices)
        for j in range(num_vertices):
            if self.adjacency_matrix[vertex_index][j]:
                vertices.append(j)
        return vertices


    def compute_depth(self):
        """
        Computes depth for each vertex in the graph.
        Depth represents how many subsequent courses are blocked by this course 
        in the longest prerequisite chain.
        """
        # Reset all vertices depths
        for vertex in self.vertices:
            vertex.depth = -1
        
        # Compute depth for each vertex
        for i in range(len(self.vertices)):
            if self.vertices[i].depth == -1:
                self._compute_depth_helper(i)
    
    
    def _compute_depth_helper(self, vertex_index):
        """
        Recursive helper function to compute depth for a vertex.
        Returns the depth of the given vertex.
        """
        # If depth is already computed, return it
        if self.vertices[vertex_index].depth != -1:
            return self.vertices[vertex_index].depth
        
        # Get adjacent vertices (courses that this course is a prerequisite for)
        adjacent_indices = self.get_adjacent_vertices(vertex_index)
        
        # If no outgoing edges (no courses depend on this), depth is 0
        if not adjacent_indices:
            self.vertices[vertex_index].depth = 0
            return 0
        
        # Compute max depth among children and add 1
        max_depth = 0
        for adj_index in adjacent_indices:
            adj_depth = self._compute_depth_helper(adj_index)
            max_depth = max(max_depth, adj_depth)
        
        # Set depth to max_depth + 1
        self.vertices[vertex_index].depth = max_depth + 1
        return max_depth + 1


    def has_cycle(self):
        """
        Determine whether or not the graph has a cycle using depth-first search.
        
        post: returns True if there is a cycle and False otherwise.
        """
        # Reset all vertices to unvisited
        for vertex in self.vertices:
            vertex.visited = False
            
        # Track vertices in current DFS path
        stack = Stack()
        path = set()
        
        # Check for cycles starting from each unvisited vertex
        for i in range(len(self.vertices)):
            if not self.vertices[i].visited:
                if self._dfs_cycle_helper(i, stack, path):
                    return True
                    
        return False
    
    
    def _dfs_cycle_helper(self, vertex_index, stack, path):
        """
        Helper function for cycle detection using DFS.
        
        vertex_index: The index of the current vertex being explored
        stack: Stack to keep track of the DFS path
        path: Set of vertex indices currently in the DFS path
        
        Returns True if a cycle is found, False otherwise
        """
        # Mark current vertex as visited
        self.vertices[vertex_index].visited = True
        stack.push(vertex_index)
        path.add(vertex_index)
        
        # Visit all adjacent vertices
        for adj_index in self.get_adjacent_vertices(vertex_index):
            # If neighbor is in current path, we found a cycle
            if adj_index in path:
                return True
            # If neighbor is unvisited and there's a cycle in its path
            elif not self.vertices[adj_index].visited:
                if self._dfs_cycle_helper(adj_index, stack, path):
                    return True
        
        # Remove vertex from current path when backtracking
        path.remove(vertex_index)
        stack.pop()
        return False


    def get_registration_plan(self):
        """
        Return a valid ordering of courses to take for registration as a 2D
        list of vertex labels, where each inner list will have a maximum of 4 vertices.

        pre: a valid registration plan exists (no cycles).
        post: returns a 2D list of strings, where each inner list represents a semester
        """
        courses = []
        
        # If the graph has a cycle, a valid registration plan doesn't exist
        if self.has_cycle():
            return courses
            
        # First, compute depth for prioritization
        self.compute_depth()
        
        # Calculate in-degree (number of prerequisites) for each vertex
        in_degree = [0] * len(self.vertices)
        for i in range(len(self.vertices)):
            for j in range(len(self.vertices)):
                if self.adjacency_matrix[j][i] == 1:
                    in_degree[i] += 1
        
        # Keep track of taken courses
        taken = set()
        
        # Continue until all courses are taken
        while len(taken) < len(self.vertices):
            semester_courses = []
            available_courses = []
            
            # Find all courses whose prerequisites are satisfied
            for i in range(len(self.vertices)):
                if i not in taken and in_degree[i] == 0:
                    available_courses.append(i)
            
            # Sort available courses by depth (prioritize those with longest chains)
            available_courses.sort(key=lambda i: self.vertices[i].depth, reverse=True)
            
            # Take up to 4 courses this semester
            for _ in range(min(4, len(available_courses))):
                if available_courses:
                    course_index = available_courses.pop(0)
                    semester_courses.append(self.vertices[course_index].label)
                    taken.add(course_index)
                    
                    # Update in-degree for adjacent vertices
                    for adj_index in self.get_adjacent_vertices(course_index):
                        in_degree[adj_index] -= 1
            
            courses.append(semester_courses)
        
        return courses


def main():
    """
    The main function to retrieve a registration plan.
    The output code has been written for you.
    """
    # Create a Graph object
    graph = Graph()
    
    # Check if filename is provided
    if len(sys.argv) < 2:
        print("Usage: python script.py <input_file>")
        return
        
    filename = sys.argv[1]
    
    try:
        with open(filename, 'r') as file:
            # Read the number of vertices
            num_vertices = int(file.readline().strip())
            
            # Read the vertices and add them to the graph
            for _ in range(num_vertices):
                vertex_label = file.readline().strip()
                graph.add_vertex(vertex_label)
                
            # Read the number of edges
            num_edges = int(file.readline().strip())
            
            # Read the edges and insert them into the graph
            for _ in range(num_edges):
                edge_data = file.readline().strip().split()
                if len(edge_data) == 2:
                    from_label, to_label = edge_data
                    from_index = graph.get_index(from_label)
                    to_index = graph.get_index(to_label)
                    if from_index != -1 and to_index != -1:
                        graph.add_edge(from_index, to_index)
    
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return
    except ValueError:
        print("Error: Invalid file format.")
        return

    ####################################################################################
    # DO NOT CHANGE ANYTHING BELOW THIS
    if graph.has_cycle():
        print("Registration plan invalid because a cycle was detected.")
    else:
        print("Valid registration plan detected.")
        graph.compute_depth()

        courses = graph.get_registration_plan()
        print()
        print("Registration plan: ")
        for semester in courses:
            print(semester)


if __name__ == "__main__":
    main()
